"""
Django settings for echo project.

本文件为 EchoNote 项目的全局配置。

增强点：
- 支持从 config/config.toml 读取配置（优先级最高），便于在不同环境中以 TOML 管理配置；
- 兼容从 .env 读取（通过 django-environ），以及环境变量覆盖；
- 默认数据库为 PostgreSQL（如 TOML/ENV 未提供则回退到 sqlite），
  并配置 WhiteNoise、静态/媒体目录、模板目录；
- 保留多语言与时区设置，支持通过 TOML/ENV 覆盖。

注意：生产环境请务必提供安全的 SECRET_KEY 与数据库配置。

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from typing import Any

import environ

from echo.config import get_config_value, load_toml_config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Environment
# 环境变量加载（.env 可用于本地开发；生产推荐使用系统环境变量或 TOML 配置）
env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# TOML 配置加载（优先级：TOML > ENV > 默认）
CONFIG_TOML: dict[str, Any] = load_toml_config(BASE_DIR / "config" / "config.toml")


# 从配置中获取值的辅助函数
def _cfg(path: str, default: Any = None) -> Any:
    """从 TOML 配置中读取嵌套键，路径用点号分隔，如: "database.url"。

    若 TOML 未设置，则返回 default。
    """
    return get_config_value(CONFIG_TOML, path, default)


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = _cfg("django.secret_key", env("SECRET_KEY", default="dev-insecure-change-me"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = bool(_cfg("django.debug", env.bool("DEBUG", default=True)))

ALLOWED_HOSTS: list[str] = _cfg(
    "django.allowed_hosts", env.list("ALLOWED_HOSTS", default=["localhost", "127.0.0.1"])
)


# Application definition

INSTALLED_APPS: list[str] = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    # Third party apps
    "taggit",
    # Local apps
    "apps.common",
    "apps.account",
    "apps.blog",
]

MIDDLEWARE: list[str] = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "echo.urls"

TEMPLATES: list[dict[str, Any]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "echo.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

"""数据库配置

优先顺序：
1) TOML 中的 [database] 配置
2) 环境变量
3) 回退到 sqlite 本地文件

推荐 PostgreSQL，配置示例：
  [database]
  engine = "django.db.backends.postgresql"
  name = "echonote"
  user = "postgres"
  password = "password"
  host = "127.0.0.1"
  port = 5432
"""
# 检查是否有数据库配置
_has_db_config = _cfg("database.engine", None) is not None

# 如果有TOML数据库配置，使用它
if _has_db_config:
    DATABASES: dict[str, dict[str, Any]] = {
        "default": {
            "ENGINE": _cfg("database.engine", "django.db.backends.sqlite3"),
            "NAME": _cfg("database.name", str(BASE_DIR / "db.sqlite3")),
            "USER": _cfg("database.user", ""),
            "PASSWORD": _cfg("database.password", ""),
            "HOST": _cfg("database.host", ""),
            "PORT": _cfg("database.port", ""),
        }
    }
# 否则尝试从环境变量获取数据库URL
elif env("DATABASE_URL", default=None):
    DATABASES = {
        "default": env.db(),
    }
# 最后回退到SQLite
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE: str = _cfg("i18n.language_code", env("LANGUAGE_CODE", default="zh-hans"))

LOCALE_PATHS = [
    BASE_DIR / "locale",
]

TIME_ZONE: str = _cfg("i18n.time_zone", env("TIME_ZONE", default="Asia/Shanghai"))

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL: str = _cfg("static.url", "/static/")
STATIC_ROOT = Path(_cfg("static.root", str(BASE_DIR / "staticfiles")))
STATICFILES_DIRS = [BASE_DIR / "static"] if (BASE_DIR / "static").exists() else []
STATICFILES_STORAGE = _cfg(
    "static.storage", "whitenoise.storage.CompressedManifestStaticFilesStorage"
)

# Media files
MEDIA_URL: str = _cfg("media.url", "/media/")
MEDIA_ROOT = Path(_cfg("media.root", str(BASE_DIR / "media")))

# Security & CSRF
CSRF_TRUSTED_ORIGINS: list[str] = _cfg(
    "django.csrf_trusted_origins", env.list("CSRF_TRUSTED_ORIGINS", default=[])
)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Redis配置
# 可用于缓存、会话存储、Celery等
REDIS_CONFIG = {
    "host": _cfg("redis.host", env("REDIS_HOST", default="127.0.0.1")),
    "port": int(_cfg("redis.port", env("REDIS_PORT", default=6379))),
    "db": int(_cfg("redis.db", env("REDIS_DB", default=0))),
    "password": _cfg("redis.password", env("REDIS_PASSWORD", default=None)),
    "ssl": bool(_cfg("redis.ssl", env("REDIS_SSL", default=False))),
    "timeout": int(_cfg("redis.timeout", env("REDIS_TIMEOUT", default=5))),
}

# Redis连接字符串
REDIS_URL = (
    f"redis://{':' + REDIS_CONFIG['password'] + '@' if REDIS_CONFIG['password'] else ''}"
    f"{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db']}"
)

# 缓存配置示例（取消注释以启用）
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_CONNECT_TIMEOUT": REDIS_CONFIG["timeout"],
            "SOCKET_TIMEOUT": REDIS_CONFIG["timeout"],
        },
    }
}

# 会话配置示例（取消注释以启用）
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
